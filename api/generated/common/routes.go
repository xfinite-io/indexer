// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"lbpu6vgXA1zn69n9z/f/PwAA///pBw0f+7MAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
