// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
