// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"kUyxdGizAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
