// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"H9WMuwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
