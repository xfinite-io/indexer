// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
