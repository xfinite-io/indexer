// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
