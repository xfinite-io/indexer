// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/6D9NbM0rAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
