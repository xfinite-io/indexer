// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
