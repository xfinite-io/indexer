// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
