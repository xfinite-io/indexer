// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/v3/rewards/get/balance)
	GetBalance(ctx echo.Context) error

	// (GET /api/v3/rewards/get/transactions)
	GetTransactionHistory(ctx echo.Context) error

	// (POST /redemption/api/v2/coupon/getRedemptions/transactionid)
	GetRedemption(ctx echo.Context) error

	// (GET /v2/accounts)
	SearchForAccounts(ctx echo.Context, params SearchForAccountsParams) error

	// (GET /v2/accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /v2/accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /v2/applications)
	SearchForApplications(ctx echo.Context, params SearchForApplicationsParams) error

	// (GET /v2/applications/{application-id})
	LookupApplicationByID(ctx echo.Context, applicationId uint64, params LookupApplicationByIDParams) error

	// (GET /v2/assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /v2/assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64, params LookupAssetByIDParams) error

	// (GET /v2/assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /v2/assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /v2/blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /v2/transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error

	// (GET /v2/transactions/{txid})
	LookupTransaction(ctx echo.Context, txid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetBalance converts echo context to params.
func (w *ServerInterfaceWrapper) GetBalance(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBalance(ctx)
	return err
}

// GetTransactionHistory converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionHistory(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionHistory(ctx)
	return err
}

// GetRedemption converts echo context to params.
func (w *ServerInterfaceWrapper) GetRedemption(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRedemption(ctx)
	return err
}

// SearchForAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAccounts(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"asset-id":              true,
		"limit":                 true,
		"next":                  true,
		"currency-greater-than": true,
		"include-all":           true,
		"currency-less-than":    true,
		"auth-addr":             true,
		"round":                 true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "auth-addr" -------------
	if paramValue := ctx.QueryParam("auth-addr"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "auth-addr", ctx.QueryParams(), &params.AuthAddr)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter auth-addr: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"round":       true,
		"include-all": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForApplications converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForApplications(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":         true,
		"application-id": true,
		"include-all":    true,
		"limit":          true,
		"next":           true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForApplicationsParams
	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForApplications(ctx, params)
	return err
}

// LookupApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupApplicationByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupApplicationByIDParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupApplicationByID(ctx, applicationId, params)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
		"limit":       true,
		"next":        true,
		"creator":     true,
		"name":        true,
		"unit":        true,
		"asset-id":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetByIDParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId, params)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"include-all":           true,
		"limit":                 true,
		"next":                  true,
		"round":                 true,
		"currency-greater-than": true,
		"currency-less-than":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// LookupTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) LookupTransaction(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupTransaction(ctx, txid)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/api/v3/rewards/get/balance", wrapper.GetBalance, m...)
	router.GET("/api/v3/rewards/get/transactions", wrapper.GetTransactionHistory, m...)
	router.POST("/redemption/api/v2/coupon/getRedemptions/transactionid", wrapper.GetRedemption, m...)
	router.GET("/v2/accounts", wrapper.SearchForAccounts, m...)
	router.GET("/v2/accounts/:account-id", wrapper.LookupAccountByID, m...)
	router.GET("/v2/accounts/:account-id/transactions", wrapper.LookupAccountTransactions, m...)
	router.GET("/v2/applications", wrapper.SearchForApplications, m...)
	router.GET("/v2/applications/:application-id", wrapper.LookupApplicationByID, m...)
	router.GET("/v2/assets", wrapper.SearchForAssets, m...)
	router.GET("/v2/assets/:asset-id", wrapper.LookupAssetByID, m...)
	router.GET("/v2/assets/:asset-id/balances", wrapper.LookupAssetBalances, m...)
	router.GET("/v2/assets/:asset-id/transactions", wrapper.LookupAssetTransactions, m...)
	router.GET("/v2/blocks/:round-number", wrapper.LookupBlock, m...)
	router.GET("/v2/transactions", wrapper.SearchForTransactions, m...)
	router.GET("/v2/transactions/:txid", wrapper.LookupTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/W/cNrbov0LMu8Am+0Z2mmzvQwMsLrLJ5jbYdDeI0y7w4r5eWuLMsJZILUnZnubl",
	"f7/gOSRFSZRGMx676a1/SjzixyF5vni++GmRy6qWggmjF88/LWqqaMUMU/AXzXPZCJPxwv5VMJ0rXhsu",
	"xeK5/0a0UVysF8sFt7/W1GwWy4WgFWvb2P7LhWL/arhixeK5UQ1bLnS+YRW1A5ttbVu7kT5/Xi5oUSim",
	"9XDWf4hyS7jIy6ZgxCgqNM3tJ02uudkQs+GauM6ECyIFI3JFzKbTmKw4Kwt94oH+V8PUNoLaTT4O4nJx",
	"k9FyLRUVRbaSqqJm8XzxwvX7vPOzmyFTsmTDNb6U1QUXzK+IhQWFwyFGkoKtoNGGGmKhs+v0DY0kmlGV",
	"b8hKqh3LRCDitTLRVIvnHxeaiYIpOLmc8Sv470ox9gvLDFVrZhY/LlNntzJMZYZXiaW9cSenmG5Kowm0",
	"hTWu+RUTxPY6Id812pALRqgg71+/JM+ePfuG4DYaVjiEG11VO3u8pnAKBTXMf55zqO9fv4T5z9wC57ai",
	"dV3ynNp1J8nnRfudvHk1tpjuIAmE5MKwNVO48VqzNK2+sF8mpvEdd03QmE1m0Wb8YB3Fa5JLseLrRrHC",
	"YmOjGdKmrpkouFiTS7YdPcIwzd1R4AVbScVmYik2PiqaxvP/qniaN0oxkW+ztWIUSGdDxXBL3rut0BvZ",
	"lAXZ0CtYN61ABri+xPbFc76iZWO3iOdKvijXUhPqdrBgK9qUhviJSSNKy7PsaA4PCdekVvKKF6xYWjZ+",
	"veH5huRU4xDQjlzzsrTb32hWjG1zenU70Dx0snAdtB+woC93M9p17dgJdgOEkOWl1Cwzcoes8uKHioLE",
	"0qUVXHo/yUU+bBiBye0HlNqwd8IidFluiYFzLQjVhBIvp5aEr8hWNuQaDqfkl9DfrcbuWkXspsHhdISq",
	"1UzGtm+wGYnNu5CyZFTA5jktJaNlOcEvy5JwwyrtlBrLGmGCIrDSJSlYyWCRrTiAX7VRcguL18y2k7Vh",
	"RSYb45BiI0s7oF7CieCw+DkSPqXMaakNNWxUIYpXsmPRJa+4GS73O3rDq6YioqkumLIH7nmrkUQx0ygx",
	"NjmOuANRK3qTKdmIYobKYYhUMUvXNcv5irOChFHGYGmn2QUPF/vB0ypCETh+kFFwwiw7wBHsJnEolrjs",
	"F1LTNYvO5IR873gLfDXykonAgsjFFj7Vil1x2ejQaQRGmHpa2RfSsKxWbMVvhkCeue2w9I1tHAOsnPTN",
	"pTCUC1ZY3ghAS8OQV4zCFE24r4pxQTX79z+Nydf2q2KXbJtkmX0EwOWEO83GfsG+06sIM+wgyZl4uJJ9",
	"/JvEvVl4B40yJPqEDLVfHUtI3x87/WfcIOO5NV9n+PMApfj6gxU7K16CSPrZYpLfhkZbFtzdCC+kNF8L",
	"ahrFnp+LP9q/SEbODBUFVYX9pcKfvmtKw8/42v5U4k9v5ZrnZ3w9spkB1uQ1DLpV+I8dL33tMjdhuakp",
	"/OfUDDW1DS/ZVjE7B81X8M/NCnadrtQvC7zQjM2cunO8lfKyqeOdzDt38IstefNqDLtgyCmuARSmayk0",
	"AyvBCxSW791v9ifLGJgAvhfJu9OftQR9rh27VrJmynAW2zzsf/9NsdXi+eJ/nbY2klPspk/dhK0KbcYY",
	"PqI5NY7QkcAd6TNlGVhVNwbVthQNBaT/GGDrz9kei7z4meUGN6gLxiNW1Wb72ALsYNfH2y34P+gxe+yb",
	"A5kqRbd3vI8oAjMQZcORv7fqluV/NV1zAQtfkusNE6Sil5YdUCHNhiliz4Jp44UhKpAoH4OxxklUp1Se",
	"LFIUkzhTfetDbU/tGOfatt15olHTe6WGY22XPu5+7UEL3Z17oAegh3gnb0sT9hr0F1pSkbNjnPKFG2r2",
	"CX/HBQcgvsWr2MMx+2MOW3mMIz4GAdtxdhIsNLpfkQ9THmOT9LF2aQ8G5/frAefDWd4a4/9SyvzyoLOc",
	"OioYdcfM/xmY6RFQKZdF4m7mZ0uda0ENneqR5NUzpnD3yxEOlTie5aJiWtP1nMFHUAFW75bUDjcHEz5Y",
	"ROSarMNhEFpz4m9DRBvV5PaS6k7sPSssTMdRC+/60NB+vseZLRe5bGopfrpQVBQ/lXIt9ziUXm+8fO7f",
	"e+auJPpVNRXbQ7oWzFBe6oO6cp0fusvspubqIIA38vonI39SrGCsOmSAlI1hRq+KrtnkNgVBNg9Djzfu",
	"AOSBkMSprPiRdzrVgDfFS+zDkWKHI5Abke8FVWOZ4H4H3ZewlbePDLhCita7FDygywG1DWmoTxkj+B5j",
	"8XJsg+12RZvwhcmdrh7wobXkfcu1kWr7RUqXPYnbCdQ3+7Ga9+yaqmLPTrMlXcTSSqm5WP80X7OJ2SHf",
	"n4Wib/WFOaTXT9Tsd5Rrq27/VLHpAx1QxJ5r2nt8BYf7U9qTsJPD7sP86mLv3e4Rd4u+EVIuI6bYQ6AW",
	"LeLD7hxh51xgt90ednfGQRavYo6c+DLU6CEvm9Cov2W0NJuXG3YHd7Bo7B0cOAL5GHz3Lm/jkc9n1/qj",
	"Ve0w9naH3VN8RdPoL333vhxbRmfL55uAOme6S/EcP2O93yF/9r7D2DmYiIt0McxcoAefS2FPirowP3SA",
	"n4tz8YqtuOD2+/NzYbnN6QXVPNenjWbKsd2TtSTPiRvyFTX0XAzvt2NxzRDJ5aCpm4uS5+SSbfdRHM7P",
	"P9JyLc/PfyRGGlpGsTZR4JmLkWgdiUOUwwkyixmyMZkL2MyQ3SdA1yFCA0bGCLipWZfEjY2BJC4g1I2f",
	"JgNa1zqDSKUMQpXSy6/r0i4/9iBgeBOxR0Ysa/dhIlx7aOB8/y6NC72g1wTxizSaafJfFa0/cmF+JNl5",
	"8+TJM0Ze1PVbO+aZheO/XNiEpadtjaFje3p+2sFSEhIWDueZsRujaFan753n5x8NozWc/oYR3VQQVVeW",
	"BLp1Ir5qJdeKVhD2o9sF+P0YPwCEY54si1YIizvDXj5MOb0E+ARHCG3IhpUu4OgW5xW5Xw4+rh0unInA",
	"6PPzjxDz7E8mxEiuKRfaSwXN18ISgQsnvWAkt1oAK07ImxUBrrbsdHdJDY5jBtbBNUaAElBvIHyI5FRA",
	"ZChqZhb9qdj2QzE0M8YHvrxnl2z7IYo+2jP02gUa0h0isWjscEEstidMrqkmlYSgnJwJU25d7GICNdPA",
	"NFwYDMNyqmxm8XeMaQDVRCGqlnBiFuLG6CNiFLFJ65qsS3nhOE1A0ecBR32fcabyzgKgj8BQkgYZvw0T",
	"tFdTldgIJMSRLThgoXa8W5Hh5PIORrkVVxriYhl1MoLGJHIA5rmg3SEo/9ww0MqkIkKaHkppT9IppA9R",
	"fctFTZXhOa/nRWjg6O86fewgu0R7UpjLVV9mD0RqUoRg4+yC6rT4ZvaLxcBGY0C3XaNndH4m1JZhBScE",
	"ksEcqV6UEOMd8k/wjKmC4HO/bMzHGAMtTRdMiVan8mB0dyRW3jZU+zh0CNf3LGKWmjOCvB/sBgACW7qJ",
	"sDfWW7mdt2RXdGz/xwMi34jC8g6muzH5IdzRi5U++S9DEC7m2fmwSB8L6QMgF8u9ghmXC6vjNenjkAJ0",
	"PEtda1w4NvaI4kD7g44OyMLxj9Wq5IKRjPCwWgOrxRwKmXNMJGgp0c3B7BXgj8Rimx1g9ggpNI7ArqUs",
	"cWDydxnTpljvA6RgHLgJ9WMDW4n+ZjP80iHhMZiKdlwChryjJaJlGxuMx5iyBCVZ0tj9rNOKYJMLd9+I",
	"xFUKRS1ryu0FX+gG8miMzGV5MriYaVYy4PRZh7Nm9hKW1OkYoOGZ7xZd2sgjvrIq1uOIlSu25tow5S7s",
	"AGEIr26jx7eGWcioMUzZif7fo/94/vFF9n9p9suT7Jv/ffrjpz99fvzHwY9PP//5z/+/+9Ozz39+/B//",
	"lro/XknDMhB32RUtU+bT8/OPttFrDar4a5CMSfbT2SqCiU58xJAB016ybVbwskmftpv3b6/stH8Pt1fd",
	"XFyyLQgZRvMNuaAm34AU6kxv20xMXdKdC36LC35Lj7beebhkm9qJlZSmN8dvBKt6/GSKmBIImEKO4amN",
	"bukEe4Gb5ytWpmz+cQIu2BQswzT0ZMpmMyCmwo89pX5FUIxzXhwpuZZuKO74Krgo2A2kenET5bXpoQ97",
	"proMtkTkptE09nbmRrhztTheXawau1HSurH7eIvlDYefu7wR9kLrmhc3PeMUHliafcDp7XPrw+vjAMGA",
	"cNxgO5ArMkQNU2aMVMwb05BaInUEkz9FvLYhGbXph/MOxgtwlw0pm6BE9aa5MwRkwzxJt/YULpKVkhVQ",
	"3vAWFCEnH9HvOyjYipzerK6cwxBfLPOENOOd9nhGy7+x7Q+2LZyq7Y2Jo1zMJZn2ugM9CRdGHuFobmdZ",
	"TGG+G3EH5r8LxJbEesj7R+tOx1GwJwHQulbyipaZs7+OMQolrxyjgObeXHvPMj19Vh/++uLtOwc+WPoY",
	"VWiRn1wVtKt/M6uywk2qETr1ier2WubNYn0h4uyvXHdsttcb5lKOo0uLFdcOuZDKW3t8xBGcDXfllbs9",
	"LbLOdYBLnHAhsDp4EFrTDzoQuk4DekV56W0uHto0Z8LFtW6bvZlTPMCtnQ+RDyk7KrsZUHeaOnZwoniG",
	"iVToCtPpNZEu5TlcluCGBAYcQNCKbi3eoOdryJJEU2WW6DJd8jxtlRMX2qKEQIeSbUyg8chdy45oGXp6",
	"rIZHY9lmekYGRA/IaI7kZvo8jrG9u5DO490I/q+GEV4wYewnBbTYI09Ljb4Yx8F6dMLsjEU77lGThgn3",
	"0aFdcYlbLS6McogmbZXj4aTu1Nx6wtndRom2Q42pzwDEtAYd+wYH4L4KxiqPRcGpSUXHjbJHiEE849wI",
	"eqtbOOJzrKIR3LlYDzid3bWmvLbuipCk2cWoqH0xLmbt+HsI2FaeAmCxJMW6KLTUMjFMI66pML66itst",
	"11sztCzaXtdSaQPleJJBM3tdN+KqLbe6ZOhspeQvLG1kW1k8uB5OH02MvdODz74s9DjDyKUhnMw4ouxC",
	"xlD35rYghUvmrYEai0uPSq153I+Pa5TBjF1Roo+kG4gzIsSA10TuXrjReRcFFchcXkLxto4DNM2i4git",
	"Uxy/ZVEO5qEhgF5f0PwyfVOwML1ogxw6zhQjie8caht1z+uERPESoS3XgOM1UxU3XZHXi1s+QOv/rbGj",
	"nFe0TKv/Bez+h45CWfA1xzJNjWZRmSI3EKklFwaxqOC6LukWw0jarXmzIk+WEX9zp1HwK675RcmgxVfY",
	"4oJqUMxaW4/vYpfHhNloaP50RvNNIwrFCrNx9a+0JOFmBqaS4L28YOaaMUGeQLuvviGPwG+r+RV7bHfR",
	"qduL5199A6Wd8I8nyYQELOg2xX4L4L+e/afxGBzXOIZVFdyoaX6MJTnHOf0ENWHXObQELZ1w2E1LFRV0",
	"zdLRUNUOmLAvnCa4fXr7IgosIQeKJeHmZCzK3/KnbEP1Jq0LIRgkl1XFTWUJyEiiZWXxqa38g5P64bAe",
	"HfL6AJf/CE7ymqQNYffr4kvnMdpVQyjD32nFutu6JFQT3ViY2wpfjiEmN1gxzdRVehI1csBevXB9ySMh",
	"RVZZ2ikeO37Wxb9kDLI0tEyHP3re1Y9+nR56ro5hR8lGN7bpbCyNeNLBW9yo9DppY6f6/v1bJxgqqVjX",
	"LnnhQ2s7IkYxozi7SlJsPw47aCZBXPidTykomDo+gBV+jiEbu+ZIeXnJWM3F+vTC9kEVAkftKw9rJpjm",
	"epyw1xu7PfazJcXoVgpDkwtWSrHW90+THvARB9GaAQa9ebUL6sHAvhBfBk3HN8a2s1O884X7cGjb/v53",
	"Iwq42lmU4L1rOx4fZZkORti+dPGw6L7vulJwvdcUbJVMFChugAw3lIuRoCnGipEAEAYznkllODqRGfsV",
	"wjkMr5g2tKrTTBGMd0iJQNUW0NDFakma5VIUmmguckZYLfVmVxrPSPj5jYDJSq6R9cXF2XOpMJ0KJICR",
	"vRSLuQGgk8kkXRgzJaUZAxRERZwFJKUhtDEbJkwIu2JQI7a/EgwRBU0IFW5kWeQ7y4Z9oTtaltsl4eYP",
	"OA4EdoBcqJi6LBkxijFyvZGakZLRK9YWBIbR/qDJhxteaCj3W7Ibnsu1ovWG50SqgqkT8toVawTtDDu5",
	"+Z6cEBcc78LGPtwIWF4hGapu8TpxmT7OL9iT4xUviRTldvAzVNHVrLxi+oR8uJYIhG4TirQVhp0eF43B",
	"wNqCr1YM6BSWA0od9Gs/RDBBaWMosByGdWv6FajtRmSgzYwotwZvUDfiJTYiLhq1a6TvkUaFmrRHqJIV",
	"a6aWaOqBbecVaxPIrA4hlWkvkiuGQZqWs3FhlCyanGHa0lkHHyOw+ACkUO01ygsAHPKVpVs4/SXQ81R7",
	"UYBL1xO8BwrZXSGcHbtiilzYW1Y70CNkOhFc2lAFceYMsiFwqax4nGbOTb1WtGDzfEvABL/HHiHdxo9w",
	"Jfcb4Afbvq82dXSTjsRPS+koUNJKmZiXp3jZqOr1fix6+TUWzFasxLBSqLUMbZcDxWrFWKa5SFtlVowB",
	"b6d5zmqLzvFbGoxZRoV6JrAKyHfxstWesDD8imHA64QykOW0zJsSA7smJP11TkvVNWWXbGWkRbC4xHpr",
	"quB2rgsILMMyxzifsgww6mEpyqLp1rVALd5XFbbEoXr+12EIeVayK5ZW3BnFSPJv5bW95G7DWdgpWjCW",
	"SC9AKgFy1FXAuYen/b27YETgIzE5rJsG0h7FyOYW8TnXTHFZ8Jxw8TNz1BzYkscYLC4uheGigZrsirVw",
	"o5wgEBTfD3wfYoAaS+2zH7pRoYJdd067iPS5bgylNvSSIdg+fN+JxrlnqpjmRTNiYlE070K2HzI64n1P",
	"DTtV4Wj1kfCyx6ECkU8RXR+Xe2jTO63hLo3yqQ7zncOsaAjYJo5RJ8LKXM6wbzly95FGevuAz5kLY18x",
	"pbsBS5Ephd3sGNu26IyPmdRK1hC3tv8smQ8l0KPzbZEdtzjnlS9MeoH+zPmyEzs4kmYeANDX3OSbbCRG",
	"27bFFhaG9/2b1nBKVCGACtlqxXIzBwYI9sUq/aNQ4GcLxStGC8jOaOO2MWK7D8qjv0tih9aRXiM0By20",
	"VWtglMd7lKANGLIL+X+QM3H/SsL/wHUzgwy8IuPOPm2kwjYOedqkH0q2TMOuhCLwEY3UUtMybXn2kxas",
	"pNupKaFBd9Kg2HrjO8ocrGcnCsJuWN6MxBFGUzs6m5rcNukvOJDnkCriwub9k/yrUlLFJSN6zjhBmG3R",
	"lg6BW42E7z4LPWTVdg/QVzKaKvk0bbUbr36yXPz1ipYjcfDvWa2YtpouoeTDX1+8dc6RsWj4fDR5gxqX",
	"mWUoGU2b/LyEm1qat2GsEXx3j+YkLaNj8UUYXmQ/D3of5rUdKy8SbagPVxsC9Dcfkktqyp3nr00FGO6s",
	"Sw8ZJuzMCettD7i/CJd0AYOkVhIXnRliNNnAZ0xHD3i9B/oWF1kIFkw9ULFcAMl0C4rsLI3HdVbxtQJu",
	"mR51nGwiM+IO7t6BvTdpO4MfL7W5g/rPiR3WvKpLdDc5HcFK9LgX2SsnpY0AuvuAsmPHqtx5tAk72AF0",
	"/CCTQ2HZnb05HVDyD/FSVnXJxhl5jY5CfKgLZTVkBtOi4E6WeeOOzPNGtVa/fsjID7Tk+ICKhuxgIWVt",
	"/7UyUdj/QHqHbAz+n1Fl/4O1Krr/Q6yKUontUAs4Fy5ccTM7kA+8DcXIFh6zk6nGB6aIzTJXD4VEgpVN",
	"hvx2hDOcTIlG9jaM2VIlfFnDlzhamiAg4LbW/i9NCmaYqqy2vJHXpGryDQQI0zXz8cLgiwdTbW+izug+",
	"rKgb9+48krqmOQ6EoRolVWumiIueIK4EXQjBqCjvPePUdxvD5ZmmBOeuKObh42Og5kSxzIlgaQ/GJdue",
	"ohSH3w9gHOMh0SOAQWD0HYJ0q/jqOER/B75edhQgLDzTyWoI4B9REbLwOVrbUxEaJh/MXR6sA8ih0Wy4",
	"zvnurXhvE6yiXdtcLX64uePKt7mYo3ynK0jY7qD944b4qi6Je9t96e64zrYu5Sg+d8sT9l+3BKakoZCW",
	"e34yl1UlBZinyrLnGxQFgdgWDe9RCsLEFStlzZKtYZNmhFVqvhasMDcC4yLO4M8PNyLVNha/0DpaXqoc",
	"XfS+8GF1Gnt1hzC8Fd/+PXTENgC1HdE/O334iK8xSi6MCEOtmLrNmB/cGDNKgK2FwswqDBN1r/05tyee",
	"cO85c59p6UuD+XDQ4Mdl/2po6fzUArzCHyAkMr9kAqt+hVeXjSRM6EY5t7CFFcazoLhhZCx0ddvk0Ppf",
	"2VRNHQUm82CNd0FREN6LXa06UNjDkdM1hVxF22wi6yGHtAfX0Ke1gZ1rsrwT1EwWK64qVszMiY29YpDa",
	"4/tP5D5gabL2ke900kv0CKYYZpCTR29ePSZQHmIsUT96HX/3suNaYfMgwqjbASz9JKd9oFgxNuaK7EVv",
	"kBUbETa7qpysrtoCJ9Cqbz7eCeXMcLRvqYaKJa65c5t/oTFoHSDdG43DoeKkzL2rYCwXayWbdMjSGhOF",
	"/wIvqRImcomvzhpGQBHCQBq9oV9/9fT06df/Tgq+ZtqckH9CJgNqQcP6Sd3TJLyty9Qp9EYAsJAJiOqM",
	"i5aI5ty4Ax1ExXAXNQHD3P8JJ6sLRKt78yrZSxhFkcllcrVKJlD+A35vzSjK8z7Fhrs7g/vha6MHSt+/",
	"4VOln5eLHWV9yqtQ0ecwAi/ZWLm68iaBps+eZi2mnpC3tjdhYiWVvWVWjbGyFh4S93a+GHsw4t60pTsh",
	"2F78wpSES7Qg0t6Z+7KGR5sNkRg0Bz1Yu3AiC0PIlAyxx4/OQGtYIpCP8Y42RGnSCMNRzbDb+EO0i7Vl",
	"8Bbof254mcCCWtrvOoZjSYQkWJQ6bolxc23mCMLsApc7iHS/5BRnixdpG5HFBIiZeBtV6mhv6PmGirbK",
	"brfMBwY5oaMrqlzWw8l9XlXt8tj+9VHIkegK4QpQWR0Z0huCoeV+t7um24oJcyBTeIe9MXADCjCqaSVU",
	"jSihvveucpZjD3zbse3HkF4XtH0wqSEjita4HFG9g4val+5t1SdELiulVg0E/0Xxkt6k5m4VwTR7ybZE",
	"eTNBXCkPNfcDFH2UGIankiI+8Iq1qjHqEikpzGdJC7zhpK9WGPmN3OwPE8sJw0xjhR7BCuw7jRPhFPZA",
	"27PQp/uI99DAsq1Z14/dqdbZDdyEa+YJeRUCasEEj6FlbZQtmjT6hnpMlwvZi1x50wdV3hQJtvzz8481",
	"uvUThOsaoJi3bYYC3zWh+Wodan4nbAe+2c2KqbZd6v7uW67UL23DoenANxuWi+9wnuUx3kdP05A75gwm",
	"SARpLbp3F/fuSqcYnqOIGOda9Nlh6JqsKOdiUcC4Hwmrjp4yJxk4sn9iSnD7w0talh9uBM6UiDBonxRP",
	"uaawSKPLMghc07JW553yxgxHsbEhnea51UiKNooxgvMPmvSruGBs47COS0cw78k1EyX+A/5RtR5dN9gx",
	"hloTzwlV66ZC2+/dr2/HCkYL4PHCJTgNq7g5TQhJv1GsIFK51Aa+cnkrYxUkZlbVwqcR3so1z1uNqw2s",
	"HMH0pdXVWe3ym6XI8uA4tbLLXoiMJOfocDxfnJA3GAatGC2QiSpuWKq+U2f9kBt4zcoSzMaI0Vk43agE",
	"3Imlok79LA2YrRi8gNB3wP6GK4bRWjcjJzbGlVywVeeQfoUTemlnciOFQ8qpENL8hs5pz4phvTdgojCB",
	"ug6lw0om/FNEqAvDsCOmO6kYX4updxtW1AsC3T+upDjocimXfhUfvB5IiaAiH8ZEwSCPg2F5dlpkUpTb",
	"FHeNU+167DXsxeTjDSH5TrehJdqtMqo/MW+Jns28i1YIiA03zHfHXd8BBd5uXdWtN0CHa+zq24mfSdSB",
	"i2Vhf+hdmlnk/JrUzLAYQmkXjvxJsczLT8+xRIF1Epo2HOdcvCC/MCXdBTIMZQmiNZm6vHGXL3qS6BSK",
	"muhBt/6UexaNwcVPaIejhafOzz/e0IGWATDdQr84rIbYzjN+PVK0Iz5j70FxVTpuWY0HZ5zY2LGnyc7P",
	"P65oUfSqOsQhOshkQu0V3G1XvQSQhV6PFAqZPM3V5GlOjN9JKrj2N8CJRyX8jRHTN679jmOPVNjieAhe",
	"W99pOPUc4g8+5Vmo4W/Bt0UOP+sEekzUlaMV3MlehJKhDjgZ4DshjoU4/6v/XXnbSrny3My7bLxTsfeq",
	"xwuUaxWtj1q1bifziCAed0WzUUd0m6rjBLMfL6pCAAO0Hu/+2yG3e47Ij54+QfjaT9CgcRWR9mUyxSrI",
	"LmqvmInDcSWXglrY1sJC5z744uMQYh3NEO81IW/syLS8plvtbactYo0P53cVa5kk7HZx+iEafNN7o3Jw",
	"Ir1nOa85PLbW5YIBx8ctjiOP3aHl0jIdzIviV8Fo4WKIaVvErOso8n4iV46JRgJ66baZll1rAQ7srcO2",
	"zUs/tl9RONJInp3Mf3Q9Yn5hS3fwPOfJm2R2znS4L4/DXsjkcJpx7ib6b1WM+EmEbWQP7TuqLjsykOru",
	"Q1MYLN8ZtaNiRCHuB7w947wL79rnQSBkN9j6f2AKnX3vqShkRV43ArHg0Q/vXz92D9B6JPMJ+Rb5HCRf",
	"8LM0q+GzNInHWeyWHOtBmsviV3qQphw8SHP4Suc/ReNxa+whGh8cjv6kNddGJUzE9/8CzRSb8b7BaT7j",
	"3Bj7MhrXDTmNm+kwRQr1qJGHe02oWdQTkbdSRzrP2FGDb1JrVw+vVUu6IXltZUoRIusii/vOkL3ueCNP",
	"BjiNBCaBAmqJN9G0e1XPc+Ho/VR8NgQrapaRmrBqRKF7W9hWsZ9wHk5qCU5J8G0m/ZBj4nOuzDyLvYxd",
	"SMCL54Lrw+t9/YcqoMoh1jOEFxTx8b5+KaB2K92z4Ymk1VKuea7RVrGvu/Ot7/t5uaia0vADx/nO90X/",
	"a1picvAwnhkqCqoKwoqnX3/91Tftcr8wdjXcpGTciVuWM8dRw/OuxhdWN4OJ+aM8Wcshyxr1Sql1a6QP",
	"Xqgl1GVto6L2cyYBIOn1Rov10Q0XW0IjVJdWwS0Nb39a2t82VG9a1tl9RpkKShy/6kdzQR7Fr/NQSUQU",
	"2a2iCnrkMcY4WiL5EmgjZo+ID3NZ4ncRJxmWnnVLRAOlxRefXAZ7XZfM6nYtDxzSTa62tZGn/mhQ5Ps5",
	"z/iwHH88XnrXoQHUrJRWE8FccatMthoXXKVbqA6oljfYn7MYrlQpvY1i2kKUDkXZqPPzH9PKJqYwp7XL",
	"dKfPe57tWW9PuzuO+zaq4daXCMT90vIOHLh/kIZ7/hkCgVegjeVSGJqD3oglbxcvnGlp4QrTLjbG1Pr5",
	"6en19fWJtzud5LI6XUPSQGZkk29O/UD4okicWuu6uGp3lguXW8NzTV68ewM6Ezclw7eJ2Q3YtwJmLZ6e",
	"PMGMbCZozRfPF89Onpx8hTu2ASQ4pTU/vXrmKippC9SpSznFKrIJnfg/mQlpqWAIaTRTP6EPp2Z4x3lT",
	"YEP3HgcobVgSAaZ9+uTJ4vkn2FxqRebHhWZU5ZvFj/a3FFD9spqjkMWCfcO1kWrrKvbjza4pqZqCOCKo",
	"b7H7nsBjIQjbYrk4VaxgFYCHi3p6msumlsKu6X341slHw3tuLbVJZS/6LoTW3MrpNTMEhyQFM5RDCeLB",
	"otp+ey7m6ulpHGaU3PUz6IBXQ9f2ZAAENnot1Qs/nHMZ4cubzz+OPY9imbj9+18Ng6NwdBaZ0FpH5pBh",
	"7s4kRhOPxnhW0yiMJU7MWPKKmz2na8tc0TWLZjsh32sW1ZKUl5CSgdcHH3juSyGGTiOA2SFScLUsbIhG",
	"uGZ3dYFgRyq8z2ENSUjgLhJRFO1Jp06bM1K7gvuuqEW+JY0orb7oHS/gL9VhaVDCD+s95NTtgMt+8iG8",
	"7iX/1EL9JJmDMLMQ7nkibzDEGO66oBxET8/7q7DD0GUo0BFHTCzbx5qci2JJQsmLnm196SIe/IOew3cy",
	"MZ5ibMEuHjqjZZlaZuRl2++ES/dExxd6vHaKW52tj3WMHNnuXQ5Yr3ZvsludcQyYNk11nLJ2RjBOfx4D",
	"33MkHz/QvrKA5QuhqHHNFAxphbBiVANmeqsnclUfwlJwTS9KBsXnwKTRiX8YRb5Qc3WPE4gLgYyz7n7k",
	"x8QMPybFFehdzkwZjXb6s0aFuh1wPGJ2n3SRlOLvK9pNpryGYsToacJzBcuhnawx4974G5OBVBiO/L12",
	"8X01XXPhYljA+FfRS7DxCUwcciFknjp9hrMVNcH/4YSTw5gZNrhWenc34MekntyF/BGEkjxezNE2Tj/5",
	"6EFefB5VPd5KednUwaoZv6Ew0ECwrTvRv2wBPSc1kGAr9dQOyGxV5wiXA5CLeKOMatheEnku7R+RVv9n",
	"SsI7YRh7sIk7ZAtpUjwaJZZAHzsocd49rEeWfX/XBF3Gjw3sos8HXb5XYMDOsuI3Drd8AEMuewWjBBQw",
	"9dU1k1CAIxQG21v9QZP2mPYTvn5KTuzzcuJJj5BclNo2vv6wre0+lBDu+7PdLY8/TeuoC/zXp48FCxWk",
	"dmm+Jlnwl9hfKvwJbHBnfG1/KvEnsP6j7TO1ds3X44vX0K3Cf+x4sxbp6DBaSNfxcbF1ZQvSZ5FWzr5I",
	"IeanpIZIFVURb6euuKvbPTZ9aHAUELDkch8GerMDBt9gX737Towl/ZVFa8JHaQyv7L3RMRoqyPvXL8mz",
	"Z8++cW+/WY0B0WVswTgkpsbGwAWGUVATPs9hP+9fvwQAzoJJeVarnYcaMOpYK4cRv7yF/45NQ79Lm8mv",
	"ecnBVTvV3unCWCtgWj0JFQXu8SbwO7nuD98vu/17YyNPAXg515nwaJeX6J46y3ERtx/3XXRbTfsvjm0K",
	"+72asn+X17wjmzF61DDP9tmtWPlg/+xlLd6hDTSa5PRTl0fstoV26+kmbS1tk7QdNKUD9DnVTj3gwfR4",
	"LJrdk1LvzwR5R4bHkL69U2pDy6lgAxxqh6h+EKS/I3vpazD4ob3P5/57aYB3+5AJ1wamJ69e4fHvo85u",
	"Rx9dLe1ZC44wXyO4GZvPfttvvqMYoo7MSAM7maf22OYPCk9QeDwHvSNVB4Y//eQRY7d647Kddzt6bcP5",
	"6k2ckfmg2NypYqNd3dxZVHiP/lSY8laIvlz86cmf9tqayVdxOo/off78ebfSFBGSD+Pd6aWFmrP9KnHX",
	"Gwl4Fr9hNUlofrIHVetB1foV/YEP7ov/6e6Lownv40q1mNvO0jMHLx4+qJz+RaJWltylgSGWlftENXVK",
	"KcZFhiY10YfApofApofApofApofApocQpIcQpIcQpIcQpPbFJFFu2yigQaHquN6MBTSqwhKzfPdEwxiq",
	"h8KT95TM9VJWF1ywVgv2K2jTs4x0D0d336fwDaHco3d17VhXpmQ5Il/98wehaM5y4V96oMrquXPkbWc1",
	"HkAoGRTNH1dP3mttUNkPzDTEh34hLgu7z2W5Jca9i0etMuhXsiR8RbayIddALCW/hP7wahTGk1VY17yb",
	"FQdFEZtRH4vrnoU6kLssP3dvTX6Il3uIl7vjeDl4d0iffsKXivDiudMXE15nTN16/2I/7rrpIhrgdOnY",
	"0xig+7XvTJ0fLu7AvZ5lbIiiHKbTp0Ksw4OF4cHC8GBheLAwPFgYHlKnHuwWD3aLB7vFg93iwW7xYLeY",
	"F7Fyv7aG31rhoAdrxpdnzVguvj7ijX4y2K4ftdopCP3Javu741aJvRiVg9dpUqaTD53HdXcHr7rrxvzM",
	"3N8QcRz2xPk+aPdlhXjeI1a3dil4W0VdeRTrFq71/7L8afbV19nTJ/8ne/qnb7Kvnjw5oXWmZWM22Vcn",
	"7hRPaEV/kYJea6hxe7qwuOYmDDVyc1lVwCrCLw6U6BdHcp9//PzfAQAA//84gGOgegcBAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
