// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/v3/rewards/get/balance)
	GetBalance(ctx echo.Context) error

	// (GET /api/v3/rewards/get/transactions)
	GetTransactionHistory(ctx echo.Context) error

	// (POST /redemption/api/v2/coupon/getRedemptions/transactionid)
	GetRedemption(ctx echo.Context) error

	// (GET /v2/accounts)
	SearchForAccounts(ctx echo.Context, params SearchForAccountsParams) error

	// (GET /v2/accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /v2/accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /v2/applications)
	SearchForApplications(ctx echo.Context, params SearchForApplicationsParams) error

	// (GET /v2/applications/{application-id})
	LookupApplicationByID(ctx echo.Context, applicationId uint64, params LookupApplicationByIDParams) error

	// (GET /v2/assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /v2/assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64, params LookupAssetByIDParams) error

	// (GET /v2/assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /v2/assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /v2/blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /v2/transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error

	// (GET /v2/transactions/{txid})
	LookupTransaction(ctx echo.Context, txid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetBalance converts echo context to params.
func (w *ServerInterfaceWrapper) GetBalance(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBalance(ctx)
	return err
}

// GetTransactionHistory converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionHistory(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionHistory(ctx)
	return err
}

// GetRedemption converts echo context to params.
func (w *ServerInterfaceWrapper) GetRedemption(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRedemption(ctx)
	return err
}

// SearchForAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAccounts(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"asset-id":              true,
		"limit":                 true,
		"next":                  true,
		"currency-greater-than": true,
		"include-all":           true,
		"currency-less-than":    true,
		"auth-addr":             true,
		"round":                 true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "auth-addr" -------------
	if paramValue := ctx.QueryParam("auth-addr"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "auth-addr", ctx.QueryParams(), &params.AuthAddr)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter auth-addr: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"round":       true,
		"include-all": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForApplications converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForApplications(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":         true,
		"application-id": true,
		"include-all":    true,
		"limit":          true,
		"next":           true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForApplicationsParams
	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForApplications(ctx, params)
	return err
}

// LookupApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupApplicationByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupApplicationByIDParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupApplicationByID(ctx, applicationId, params)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
		"limit":       true,
		"next":        true,
		"creator":     true,
		"name":        true,
		"unit":        true,
		"asset-id":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetByIDParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId, params)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"include-all":           true,
		"limit":                 true,
		"next":                  true,
		"round":                 true,
		"currency-greater-than": true,
		"currency-less-than":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// LookupTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) LookupTransaction(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupTransaction(ctx, txid)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/api/v3/rewards/get/balance", wrapper.GetBalance, m...)
	router.GET("/api/v3/rewards/get/transactions", wrapper.GetTransactionHistory, m...)
	router.POST("/redemption/api/v2/coupon/getRedemptions/transactionid", wrapper.GetRedemption, m...)
	router.GET("/v2/accounts", wrapper.SearchForAccounts, m...)
	router.GET("/v2/accounts/:account-id", wrapper.LookupAccountByID, m...)
	router.GET("/v2/accounts/:account-id/transactions", wrapper.LookupAccountTransactions, m...)
	router.GET("/v2/applications", wrapper.SearchForApplications, m...)
	router.GET("/v2/applications/:application-id", wrapper.LookupApplicationByID, m...)
	router.GET("/v2/assets", wrapper.SearchForAssets, m...)
	router.GET("/v2/assets/:asset-id", wrapper.LookupAssetByID, m...)
	router.GET("/v2/assets/:asset-id/balances", wrapper.LookupAssetBalances, m...)
	router.GET("/v2/assets/:asset-id/transactions", wrapper.LookupAssetTransactions, m...)
	router.GET("/v2/blocks/:round-number", wrapper.LookupBlock, m...)
	router.GET("/v2/transactions", wrapper.SearchForTransactions, m...)
	router.GET("/v2/transactions/:txid", wrapper.LookupTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
